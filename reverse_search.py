# -*- coding: utf-8 -*-
"""Reverse Search

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1unMywlrfASqS2FCVNSnPU5AnqMsqMaMP
"""

!pip install cifar10 tqdm

import cifar10
cifar10.download_data()

!tar -xvf /usr/local/lib/python3.10/dist-packages/.cifar10cache/cifar10.tar.gz -C /content/

#above commands are used for donwloading the picture database

import numpy as np
import colorsys
from numpy.linalg import norm
import matplotlib.pyplot as plt


def unpickle(file):										#this function is used for load data batches from the dataset
    import pickle
    with open(file, 'rb') as fo:
        dict = pickle.load(fo, encoding='bytes')
    return dict

def filter(classNo):									#this function selects necessary classes from 10 classes in the batch
  indices = np.where(labels == classNo)[0]
  filtered_data = pixels[indices[:60]]
  return filtered_data

def calcHist(data):										#histogram calculation and reshape to 2D array
  hist_RGB = np.zeros((len(data), 32, 32))
  hist_H = np.zeros((len(data), 32, 32))
  for k in range(len(data)):
    img_R = data[k][0:1024].reshape((32, 32))
    img_G = data[k][1024:2048].reshape((32, 32))
    img_B = data[k][2048:3072].reshape((32, 32))

    for i in range(len(img_R)):
      for j in range(len(img_R[i])):
        (h, s, v) = colorsys.rgb_to_hsv(img_R[i][j], img_G[i][j], img_B[i][j])		#converting RGB to HSV
        hist_RGB[k][i][j] = (0.299*img_R[i][j] + 0.587*img_G[i][j] + 0.114*img_B[i][j]) / 1024
        hist_H[k][i][j] = h * 179 / 1024											#normalizing the values
  return hist_RGB, hist_H

def cosine_sim(array1, array2, i, j):				#calculating cosine similarity
  A = np.hstack(array1)
  B = np.hstack(array2)
  dot = np.dot(A, B)
  normA = np.linalg.norm(A)
  normB = np.linalg.norm(B)
  if(normA and normB):								#avoiding divide by zero
    cosine = dot / (normA * normB)
    return cosine
  else:
    return 0

def similarImages(train_set, test_set):
  similar_index = np.zeros((10, 3), int)
  for i, test in enumerate(test_set):
    max = np.zeros(3)
    index = np.ones(3, int)
    for j, train in enumerate(train_set):
      cosine = cosine_sim(test, train, i, j)
      if cosine > max[0]:								#comparing test set to train set
        max[2] = max[1]
        max[1] = max[0]
        max[0] = cosine
        index[2] = index[1]
        index[1] = index[0]
        index[0] = j
	#storing max similarity values and indexes
    similar_index[i][0] = index[0]
    similar_index[i][1] = index[1]
    similar_index[i][2] = index[2]

  return similar_index	#returning an array that consists of indexes of the most similar images for every image in class

def calculateSuccess(array, classNo):
  classCheck = np.zeros((10, len(array[0])), bool)			#create an array for calculating success
  for i in range(len(array)):
    for j in range(len(array[0])):
      if(int(array[i][j] / 50) - classNo):		#if index image class is same as test image class, store True
        classCheck[i][j] = False					
      else:
        classCheck[i][j] = True
	
  success = np.any(classCheck, axis=1)			#check rows for True values
  success_rate = (np.sum(success) / 10) * 100	#sum of "True" value existent rows divided by 10 for success rate

  return success_rate

def displayImage(pixels):						#function for displaying flattened raw images from the dataset
  img_R = pixels[0:1024].reshape((32, 32))		#reshaping 1D 3072 element array into 32x32 RGB image
  img_G = pixels[1024:2048].reshape((32, 32))
  img_B = pixels[2048:3072].reshape((32, 32))
  img = np.dstack((img_R, img_G, img_B))
  return img
  

def plotArray(pixelArray, className, classTest):

  image = np.empty((10, 9), object)
  for i in range(len(pixelArray)):
    image[i][0] = displayImage(className[i+50])
    image[i][1] = classTest[i]
    image[i][2] = classTest[i+10]
    for j in range(3,9):
      image[i][j] = displayImage(train_data[pixelArray[i][j-3]])

  return image
  
#plot functions are used for displaying 10 images of the given test class, rgb and h hist, and similar 3 images for both histograms

def plotImages(display):
    fig, axes = plt.subplots(10, 9, figsize=(20, 25))
    for i in range(10):
      axes[i, 0].set_title("Original Image")
      axes[i, 1].set_title("RGB Hist Image")
      axes[i, 2].set_title("HSV Hist Image")
      for j in range(9):
        axes[i, j].imshow(display[i, j])
        axes[i, j].axis('off')
        if(j>2 and j<6):
            axes[i, j].set_title(f"RGB Similar Image {j-2}")
        elif j>5:
            axes[i, j].set_title(f"HSV Similar Image {j-5}")
    plt.tight_layout()
    plt.show()

	
batch_1 = unpickle("/content/cifar-10-batches-py/data_batch_1")		#using batch 1

pixels = np.array(batch_1[b'data'])
labels = np.array(batch_1[b'labels'])

bird = filter(2)
cat = filter(3)
deer = filter(4)										#selecting classes
dog = filter(5)
frog = filter(6)

train_data = np.concatenate([bird[:50], cat[:50], deer[:50], dog[:50], frog[:50]], axis=0)
#creating a set of images using first 50 images of every class

bird_hist_RGB, bird_hist_H = calcHist(bird)
cat_hist_RGB, cat_hist_H = calcHist(cat)
deer_hist_RGB, deer_hist_H = calcHist(deer)					#calculating RGB and H histograms
dog_hist_RGB, dog_hist_H = calcHist(dog)
frog_hist_RGB, frog_hist_H = calcHist(frog)

bird_test = np.concatenate([bird_hist_RGB[-10:], bird_hist_H[-10:]], axis=0)
cat_test = np.concatenate([cat_hist_RGB[-10:], cat_hist_H[-10:]], axis=0)
deer_test = np.concatenate([deer_hist_RGB[-10:], deer_hist_H[-10:]], axis=0)	
dog_test = np.concatenate([dog_hist_RGB[-10:], dog_hist_H[-10:]], axis=0)
frog_test = np.concatenate([frog_hist_RGB[-10:], frog_hist_H[-10:]], axis=0)
#creating test sets of separate classes using 10 RGB and 10 H histograms

train_rgb = np.concatenate([bird_hist_RGB[:50],cat_hist_RGB[:50], deer_hist_RGB[:50], dog_hist_RGB[:50], frog_hist_RGB[:50]], axis=0)
train_h = np.concatenate([bird_hist_H[:50], cat_hist_H[:50], deer_hist_H[:50], dog_hist_H[:50], frog_hist_H[:50]], axis=0)
#creating train data of histograms for both RGB and HSV




#creating arrays for calcuating rgb, h and total success for each class
successR = np.empty((5), float)
successH = np.empty((5), float)
successT = np.empty((5), float)


#each class should be called for testing and displaying separately
similarRGB = similarImages(train_rgb, bird_test[:10])
similarHSV = similarImages(train_h, bird_test[-10:])
graph = np.concatenate([similarRGB, similarHSV], axis=1)
image = plotArray(graph, bird, bird_test)
successR[0] = calculateSuccess(similarRGB, 0)
successH[0] = calculateSuccess(similarHSV, 0)
successT[0] = calculateSuccess(graph, 0)
print(f"Success of RGB histogram comparison for BIRD: {successR[0]}")
print(f"Success of HSV histogram comparison for BIRD: {successH[0]}")
print(f"Total success of histogram comparison for BIRD: {successT[0]}")
print("===============================================")
'''
similarRGB = similarImages(train_rgb, cat_test[:10])
similarHSV = similarImages(train_h, cat_test[-10:])
graph = np.concatenate([similarRGB, similarHSV], axis=1)
image = plotArray(graph, cat, cat_test)
successR[1] = calculateSuccess(similarRGB, 1)
successH[1] = calculateSuccess(similarHSV, 1)
successT[1] = calculateSuccess(graph, 1)
print(f"Success of RGB histogram comparison for CAT: {successR[1]}")
print(f"Success of HSV histogram comparison for CAT: {successH[1]}")
print(f"Total success of histogram comparison for CAT: {successT[1]}")
print("===============================================")

similarRGB = similarImages(train_rgb, deer_test[:10])
similarHSV = similarImages(train_h, deer_test[-10:])
graph = np.concatenate([similarRGB, similarHSV], axis=1)
image = plotArray(graph, deer, deer_test)
successR[2] = calculateSuccess(similarRGB, 2)
successH[2] = calculateSuccess(similarHSV, 2)
successT[2] = calculateSuccess(graph, 2)
print(f"Success of RGB histogram comparison for DEER: {successR[2]}")
print(f"Success of HSV histogram comparison for DEER: {successH[2]}")
print(f"Total success of histogram comparison for DEER: {successT[2]}")
print("===============================================")

similarRGB = similarImages(train_rgb, dog_test[:10])
similarHSV = similarImages(train_h, dog_test[-10:])
graph = np.concatenate([similarRGB, similarHSV], axis=1)
image = plotArray(graph, dog, dog_test)
successR[3] = calculateSuccess(similarRGB, 3)
successH[3] = calculateSuccess(similarHSV, 3)
successT[3] = calculateSuccess(graph, 3)
print(f"Success of RGB histogram comparison for DOG: {successR[3]}")
print(f"Success of HSV histogram comparison for DOG: {successH[3]}")
print(f"Total success of histogram comparison for DOG: {successT[3]}")
print("===============================================")

similarRGB = similarImages(train_rgb, frog_test[:10])
similarHSV = similarImages(train_h, frog_test[-10:])
graph = np.concatenate([similarRGB, similarHSV], axis=1)
image = plotArray(graph, frog, frog_test)
successR[4] = calculateSuccess(similarRGB, 4)
successH[4] = calculateSuccess(similarHSV, 4)
successT[4] = calculateSuccess(graph, 4)
print(f"Success of RGB histogram comparison for FROG: {successR[4]}")
print(f"Success of HSV histogram comparison for FROG: {successH[4]}")
print(f"Total success of histogram comparison for FROG: {successT[4]}")
print("===============================================")

print(f"Total success of RGB histogram comparison: {np.mean(successR)}")
print(f"Total success of HSV histogram comparison: {np.mean(successH)}")
print(f"Total success of histogram comparison: {np.mean(successT)}")
'''

plotImages(image)